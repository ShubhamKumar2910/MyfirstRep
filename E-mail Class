  List<Messaging.SingleEmailMessage> mails = 
  new List<Messaging.SingleEmailMessage>();
  
      Messaging.SingleEmailMessage mail = 
      new Messaging.SingleEmailMessage();
    
      List<String> sendTo = new List<String>();
      sendTo.add(myContact.Email);
      mail.setToAddresses(sendTo);
    
      mail.setReplyTo('sirdavid@bankofnigeria.com');
      mail.setSenderDisplayName('Official Bank of Nigeria');
    
      List<String> ccTo = new List<String>();
      ccTo.add('business@bankofnigeria.com');
      mail.setCcAddresses(ccTo);

      mail.setSubject('URGENT BUSINESS PROPOSAL');
      String body = 'Dear ' + myContact.FirstName + ', ';
      body += 'your bank account # so I may deposit these funds.';
      mail.setHtmlBody(body);
    
      mails.add(mail);
    }
  }
  Messaging.sendEmail(mails);
}

//
How to use E-mail Templates in apex class with some modifications in body..

@AuraEnabled
    public static String sendEmail(String Language, String emailSubject, String emailContent,List<String> attIds,String mandateId,List<String> candidatesIds, Mandate__c mandate,String templateId){
        
        try{
            List<Id> candidateIds                       = new List<Id>();
            List<Attachment> attachDocs                 = new List<Attachment>();
            List<Contact> ConList                       = new List<Contact>();
            List<Application__c> candidatesList         = new List<Application__c>();
            Set<String> candidateEmails                 = new Set<String>();
            List<Application__c> appToBeUpdate = new List<Application__c>();
            system.debug('candidatesIds'+candidatesIds);
            
            candidatesList                              = [Select Id,Name,Contact__r.Email,Contact__r.FirstName,Contact__r.Lastname ,Current_Title__c,Current_Company_EN__c,First_Name__c,Last_Name__c,(Select Id,Name from Self_Assesment_Responses__r) from Application__c where ID IN:candidatesIds];
            
            List<Self_Assesment_Response__c> selfAssList=new List<Self_Assesment_Response__c>();
            for(Application__c app:candidatesList){
                for(Self_Assesment_Response__c ass:app.Self_Assesment_Responses__r){
                    selfAssList.add(ass);
                }
            }
            if(selfAssList.size()>0){
                delete selfAssList;
                
            }
            
            if(candidatesList.size() > 0)
            {
                for(Application__c apprec:candidatesList){
                    candidateIds.add(apprec.Contact__c);
                    candidateEmails.add(apprec.Contact__r.Email);
                }
            }
            else
            {
                ConList = [select Id, Name,Email,FirstName,LastName,Status_Summary_Line__c,(Select Id from Applications__r) from Contact where id IN: candidatesIds order by CreatedDate desc];
                for(Contact conrec:ConList)
                {
                    candidateIds.add(conrec.Id);
                    candidateEmails.add(conrec.Email);
                    
                }
                
            }
            System.debug('candidateEmails'+candidateEmails);
            system.debug('templateId'+templateId);
            if(templateId != null)
            {
                attachDocs                                  = [ SELECT Id,Name,ParentId,Body,BodyLength from Attachment where Id IN : attIds OR ParentId = :templateId]; //Added or by DeaGle 30/11/2019
            }
            system.debug('manid'+mandateId);
            if(mandateId != null)
            {
                mandate                                     = [Select Id,Name,Company__c,Company__r.Name,Send_job_description__c from Mandate__c where Id=:mandateId Limit 1];
            }
            setEmailBody(mandate,Language);
            system.debug(mandate);
            
            
            List<Messaging.EmailFileAttachment> attachList = new List<Messaging.EmailFileAttachment>();
            
            for(Attachment att : attachDocs){
                attachList.add(emailAttach(att));
            }
            
            List<Messaging.SingleEmailMessage> notificationEmail = new List<Messaging.SingleEmailMessage>();
            
            List<OrgWideEmailAddress> fromEmail = [Select Id from OrgWideEmailAddress where DisplayName = 'Leaders & Cie et Leaders & Co.'];
            Id fromEmailId = fromEmail.size()>0 ? fromEmail[0].Id : null;
            
            
            List<Messaging.SingleEmailMessage> mails =  new List<Messaging.SingleEmailMessage>();
            List<Messaging.Emailfileattachment> fileAttachments = new List<Messaging.Emailfileattachment>();
            Set<Id> contactIds = new Set<Id>();
            Map<Id, String> bodyMessageMapByContactId = new Map<Id, String>();
            Map<Id, String> subjectMessageMapByContactId = new Map<Id, String>();
            //String body = [select Id, Name, DeveloperName, Subject, Body from EmailTemplate where id=:templateId].Body;
            //Messaging.SingleEmailMessage em = Messaging.renderStoredEmailTemplate(templateId,null, null);
            //String body = em.getPlainTextBody();
            
            if(candidatesList.size() > 0)
            {
                
                for(Application__c can : candidatesList){
                    
                    String FirstName =can.Contact__r.FirstName;
                    String LastName =can.Contact__r.LastName;
                    
                    String Emaill =can.Contact__r.Email;
                    String appid = can.Contact__c;
                    String appnid = can.Id;
                    String AssnName = can.Current_Company_EN__c ;
                    String title = can.Current_Title__c;
                    
                    
                    appToBeUpdate.add(new Application__C(id = appnid,Self_Assesment_Status__c = 'Sent'));
                    
                    system.debug(':::::: CANDIDATE :::::: '+can);
                    contactIds.add(appid);
                    
                    String body = emailContent;
                    String subject = emailSubject.replace('{!Mandate__c.Name}', mandate.Name);
                    system.debug('body'+body);
                    
                    body = body.replace('{!Mandate__c.Name}', mandate.Name);
                    if(body.contains('Bonjour')){
                        body = body.replace('Bonjour', 'Bonjour '+FirstName+' '+LastName);
                    }
                    if(body.contains('Dear')){
                        body = body.replace('Dear', 'Dear  '+FirstName+' '+LastName);
                    }
                    
                    if(body.contains('SelfAssessment?Id=')){
                        body = body.replace('SelfAssessment?Id=', 'CandidateSelfAssessment?Id='+appnid);
                    }
                    if(mandate.Company__c!=null){
                        body = body.replace('{!Mandate__c.Company__c}', mandate.Company__r.Name);
                    }
                    if(!String.isEmpty(FirstName)){
                        body = body.replace('{!Application__c.First_Name__c}', FirstName);
                        body = body.replace('{!Contact.FirstName}', FirstName);
                    }else{
                        body = body.replace('{!Application__c.First_Name__c}', '');
                        body = body.replace('{!Contact.FirstName}', '');
                    }
                    
                    if(!String.isEmpty(LastName)){
                        body = body.replace('{!Application__c.Last_Name__c}', LastName);
                        body = body.replace('{!Contact.LastName}', LastName);
                    }else{
                        body = body.replace('{!Application__c.Last_Name__c}', '');
                        body = body.replace('{!Contact.LastName}', '');
                    }
                    
                    
                    bodyMessageMapByContactId.put(appid,body);
                    subjectMessageMapByContactId.put(appid,subject);
                    
                    Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                    //Messaging.SingleEmailMessage mail = Messaging.renderStoredEmailTemplate('00X1k000000hfdLEAQ', '0030B000028jX7vQAE', null);
                    
                    mail.setUseSignature(false);
                    List<String> recipient = new List<String>();
                    if(Emaill != null)
                    {
                        recipient.add(Emaill);
                        
                        system.debug('recipient is'+recipient);
                        mail.setToAddresses(recipient);
                        mail.setSubject(subject);
                        System.debug('@@@@@'+body);
                        User currUser = [Select Id,Signature from User where Id=:userinfo.getuserId()];
                        string userSignature = currUser.Signature;
                        if (String.isNotBlank(userSignature))
                        {
                            userSignature = userSignature.replace('\n','<br>');
                            System.debug('@@@@'+userSignature);
                            // body += userSignature;
                        }
                        
                        if(templateId != null)
                        {
                            mail.setTemplateId(templateId);
                            //body = EncodingUtil.urlEncode(body,'UTF-8');
                            mail.setHtmlBody(body);
                            mail.setPlainTextBody(body);
                            mail.setFileAttachments(attachList);
                            system.debug('templateId'+templateId);
                            if(templateId == '00X4P000001aiZ2UAI' || templateId == '00X4P000001aickUAA' )
                            {
                                mail.setUseSignature(false);  
                            }
                            else
                            {
                                mail.setUseSignature(true);
                            }
                        } 
                        else
                        {
                            mail.setHtmlBody(body);
                            mail.setPlainTextBody(body);
                            //mail.setUseSignature(true);
                        }
                        
                        if(fromEmailId != null){
                            mail.setOrgWideEmailAddressId(fromEmailId);
                        }
                        
                        
                        notificationEmail.add(mail);
                    }
                }
                
            }
            else
            {
                
                for(Contact can : ConList){
                    
                    String FirstName =can.FirstName;
                    String LastName =can.LastName;
                    String Emaill =can.Email;
                    String appid = can.id;
                    
                    system.debug(':::::: CANDIDATE :::::: '+can);
                    contactIds.add(appid);
                    
                    String body = emailContent;
                    String subject = emailSubject;
                    
                    if(body.contains('Bonjour')){
                        body = body.replace('Bonjour', 'Bonjour '+FirstName+' '+LastName);
                    }
                    if(body.contains('Hello')){
                        body = body.replace('Hello', 'Hello  '+FirstName+' '+LastName);
                    }
                    
                    if(body.contains('SelfAssessment?Id=')){
                        body = body.replace('SelfAssessment?Id=', 'CandidateSelfAssessment?Id='+appid);
                    }
                    //if(mandate.Company__c!=null){
                    //  body = body.replace('{!Mandate__c.Company__c}', mandate.Company__r.Name);
                    //}
                    if(!String.isEmpty(FirstName)){
                        body = body.replace('{!Application__c.First_Name__c}', FirstName);
                        body = body.replace('{!Contact.FirstName}', FirstName);
                    }else{
                        body = body.replace('{!Application__c.First_Name__c}', '');
                        body = body.replace('{!Contact.FirstName}', '');
                    }
                    
                    if(!String.isEmpty(LastName)){
                        body = body.replace('{!Application__c.Last_Name__c}', LastName);
                        body = body.replace('{!Contact.LastName}', LastName);
                    }else{
                        body = body.replace('{!Application__c.Last_Name__c}', '');
                        body = body.replace('{!Contact.LastName}', '');
                    }
                    
                    
                    bodyMessageMapByContactId.put(appid,body);
                    subjectMessageMapByContactId.put(appid,subject);
                    
                    Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                    //Messaging.SingleEmailMessage mail = Messaging.renderStoredEmailTemplate('00X1k000000hfdLEAQ', '0030B000028jX7vQAE', null);
                    
                    mail.setUseSignature(false);
                    List<String> recipient = new List<String>();
                    if(Emaill != null)
                    {
                        recipient.add(Emaill);
                        system.debug('recipient is'+recipient);
                        mail.setToAddresses(recipient);
                        mail.setSubject(subject);
                        System.debug('@@@@@'+body);
                        User currUser = [Select Id,Signature from User where Id=:userinfo.getuserId()];
                        string userSignature = currUser.Signature;
                        if (String.isNotBlank(userSignature)) {
                            userSignature = userSignature.replace('\n','<br>');
                            System.debug('@@@@'+userSignature);
                            // body += userSignature;
                        }
                        
                        if(templateId != null)
                        {
                            mail.setTemplateId(templateId);
                            //body = EncodingUtil.urlEncode(body,'UTF-8');
                            mail.setHtmlBody(body);
                            mail.setPlainTextBody(body);
                            mail.setFileAttachments(attachList);
                            mail.setUseSignature(true);
                        }
                        else
                        {
                            mail.setHtmlBody(body);
                            mail.setPlainTextBody(body);
                            mail.setUseSignature(true);
                        }
                        
                        if(fromEmailId != null){
                            mail.setOrgWideEmailAddressId(fromEmailId);
                        }
                        
                        
                        notificationEmail.add(mail);
                    }
                }
            }
            
            
            
            if(notificationEmail.size() > 0){
                system.debug('Send Email notificationEmail size '+notificationEmail.size());
                Messaging.sendEmail(notificationEmail);
                
                //Create a task for the related contact
                List<Task> toInsert = new List<Task>();
                for(Id id : contactIds){
                    Task nTask = new Task();
                    nTask.ActivityDate = Date.today();
                    nTask.Status = 'Completed';
                    if(bodyMessageMapByContactId.containsKey(id))
                        nTask.Subject = 'Email: '+subjectMessageMapByContactId.get(id);
                    else
                        nTask.Subject = 'Email: ';
                    
                    if(bodyMessageMapByContactId.containsKey(id))
                        nTask.Description = bodyMessageMapByContactId.get(id);
                    
                    nTask.WhoId = id;
                    toInsert.add(nTask);
                }
                
                if(toInsert.size()>0){
                    insert toInsert;
                }
            }
            System.debug(Limits.getEmailInvocations());
            System.debug(Limits.getLimitEmailInvocations());
            
            update appToBeUpdate;
            return 'Email Sent Successfully';
        }
        catch(Exception e){
            System.debug(Limits.getEmailInvocations());
            System.debug(Limits.getLimitEmailInvocations());
            
            System.debug('Error Message::: ' + e.getMessage() +' At::: '+e.getLineNumber());
            return 'Some Error Occurred';
        }
    }
    
    @AuraEnabled
    public static Map<String,Object> showAttachment(String mandateId, String language){
        try{
            system.debug('---emailContent'+emailContent);
            System.debug('mandateId:::: '+mandateId);
            Mandate__c mandate                                     = [Select Id,Name,Company__c,Company__r.Name,Send_job_description__c from Mandate__c where Id=:mandateId];
            List<AttachmentWrapper> attachmntWrapList = new List<AttachmentWrapper>();
            List<Attachment> attchmntList = new List<Attachment>();
            if(mandate != null){
                attchmntList = [SELECT Id,Name,ParentId, CreatedDate FROM Attachment WHERE ParentId =: mandate.Id ORDER BY CreatedDate];
            }
            System.debug('attchmntListSize:::: '+attchmntList.size());
            if(! attchmntList.isEmpty()){
                for(Attachment att : attchmntList){
                    
                    if (att.Name.tolowercase().contains('job description')){
                        AttachmentWrapper wrapObj = new AttachmentWrapper();
                        wrapObj.isSelected = false;
                        wrapObj.attchmentInstance = att;
                        attachmntWrapList.add(wrapObj);
                    }
                    
                    if (att.Name.tolowercase().contains('advertisement')){
                        
                        AttachmentWrapper wrapObj = new AttachmentWrapper();
                        wrapObj.isSelected = false;
                        wrapObj.attchmentInstance = att;
                        attachmntWrapList.add(wrapObj);
                    }
                    
                    if (att.Name.tolowercase().contains('self assessment')){
                        
                        AttachmentWrapper wrapObj = new AttachmentWrapper();
                        wrapObj.isSelected = false;
                        wrapObj.attchmentInstance = att;
                        attachmntWrapList.add(wrapObj);
                    }
                    
                    if (att.Name.tolowercase().contains('skills matrix')){
                        
                        AttachmentWrapper wrapObj = new AttachmentWrapper();
                        wrapObj.isSelected = false;
                        wrapObj.attchmentInstance = att;
                        attachmntWrapList.add(wrapObj);
                    }
                }
            }
            
            //Added by Deagle
            Map<String,Object> returnObj = new Map<String,Object>();
            //setEmailBody(mandate,language);
            returnObj.put('records',attachmntWrapList);
            returnObj.put('subject',emailSubject);
            returnObj.put('body',emailContent);
            returnObj.put('mandate',mandate);
            return returnObj;
        }
        catch(Exception e){
            System.debug('Error Message::: ' + e.getMessage() +' At::: '+e.getLineNumber());
            return null;
        }
    }
    public static Messaging.EmailFileAttachment emailAttach (Attachment att){
        
        if(att != null){
            Messaging.EmailFileAttachment attach = new Messaging.EmailFileAttachment();
            attach.setContentType('application/pdf');
            attach.setFileName(att.Name);
            attach.setInline(false);
            attach.Body = att.Body;
            
            return attach;
        }else{
            return null;
        }
        
        
    }
