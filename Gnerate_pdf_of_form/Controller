({
    doInit:function(component,event,helper){
        debugger;
        helper.doInitHelper(component,event,helper);
    },
    updateSelfAssessment : function(component, event, helper)
    {
        debugger;
        helper.update(component,event);
    },
    previewSelfAssessment:function(component,event,helper){
        debugger;
                var keyAccom=component.get("v.Key_Accomplishments__c");
        keyAccom = keyAccom.toString();
        component.set("v.Key_Accomp",keyAccom.replace( /(<([^>]+)>)/ig,''));
        
        var AreaDev=component.get('v.Areas_for_Development__c');
        AreaDev=AreaDev.toString();
        component.set("v.AreasforDevelopment",AreaDev.replace( /(<([^>]+)>)/ig,''));
        
        var relExp=component.get('v.relExp');
        relExp=relExp.toString();
        component.set("v.relExperience",relExp.replace( /(<([^>]+)>)/ig,''));
        
        var Experience_Gaps=component.get('v.Experience_Gaps__c');
        Experience_Gaps=Experience_Gaps.toString();
        component.set("v.ExperienceGaps",Experience_Gaps.replace( /(<([^>]+)>)/ig, ''));
        
        var Unique_Characteristics=component.get('v.Unique_Characteristics__c');
        Unique_Characteristics=Unique_Characteristics.toString();
        component.set("v.Unique_Char",Unique_Characteristics.replace( /(<([^>]+)>)/ig, ''));
        
        var PersonalityandImage=component.get('v.Personality_and_Image__c');
        PersonalityandImage=PersonalityandImage.toString();
        component.set("v.PersonalityandImage",PersonalityandImage.replace( /(<([^>]+)>)/ig, ''));
        
        var CandidateMotivation=component.get('v.Candidate_Motivation__c');
        CandidateMotivation=CandidateMotivation.toString();
        component.set("v.CandidateMotivation",CandidateMotivation.replace( /(<([^>]+)>)/ig, ''));

        component.set("v.isOpen",true);
    },
    
    downloadDocument : function(component, event, helper){
        var sendDataProc = component.get("v.sendData");
        var dataToSend = {
            expreinceGap : component.get("v.Experience_Gaps__c"),
            areadDev     : component.get("v.Areas_for_Development__c"),
            perImg       : component.get("v.Personality_and_Image__c"),
            relExp       : component.get("v.relExp"),
            uiqueChar    : component.get("v.Unique_Characteristics__c"),
            keyAccomplishments : component.get("v.Key_Accomplishments__c"),
            candidateMotivation : component.get("v.Candidate_Motivation__c"),
            language:component.get("v.language")
        }; //this is data you want to send for PDF generation
        
        //invoke vf page js method
        sendDataProc(dataToSend, function(){
            //handle callback
        });
    },
    closeModel: function(component, event, helper) {
        component.set("v.isOpen", false);
    },

})
